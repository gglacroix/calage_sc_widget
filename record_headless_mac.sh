#!/usr/bin/env bash
set -Eeuo pipefail

# =========================
#  record_headless_mac.sh
#  macOS (Option 2) ‚Äì sans Xvfb
#  D√©pendances : ffmpeg, yt-dlp, python3, Chrome/Chromium
#  (brew install ffmpeg yt-dlp; Chrome est recommand√©)
# =========================

# ----------- Valeurs par d√©faut -----------
TRACK_URL="https://soundcloud.com/calage/exalk-hurt-feelings"
WIDGET_DURATION="30"
AUDIO_TC_IN="00:00:15"
BACKGROUND_URL="https://www.youtube.com/watch?v=ywa7QQTjSkE"
BACKGROUND_TC_IN="00:15:15"
FILE_OUT="out.mp4"

# R√©solution cible de la fen√™tre Chrome qu‚Äôon placera en (0,0)
DISPLAY_WIDTH="1080"
DISPLAY_HEIGHT="1920"

# Indice d‚Äô√©cran pour avfoundation (0 = √©cran principal en g√©n√©ral ; sur certains Macs c‚Äôest 1)
DISPLAY_INDEX="${DISPLAY_INDEX:-0}"

# Zone √† rogner (pixels) pour extraire le widget depuis la capture d‚Äô√©cran compl√®te
# Adapte ces valeurs si le cadre n‚Äôest pas correct sur TON √©cran.
CROP_W="${CROP_W:-350}"
CROP_H="${CROP_H:-344}"
CROP_X="${CROP_X:-365}"
CROP_Y="${CROP_Y:-850}"

HTML_FILE="sc_player.html"
WEBSERVER_PORT="8000"

show_help() {
  cat <<EOF
Usage: $0 [options]

Options:
  -t, --track-url URL        URL de la track SoundCloud (par d√©faut: $TRACK_URL)
  -d, --duration SEC         Dur√©e de la capture widget en secondes (par d√©faut: $WIDGET_DURATION)
  -a, --audio-tc-in TC       Timecode d√©but audio track soundcloud (HH:MM:SS) (par d√©faut: $AUDIO_TC_IN)
  -b, --background-url URL   URL de la vid√©o YouTube pour le background (par d√©faut: $BACKGROUND_URL)
  -s, --background-tc-in TC  Timecode d√©but du background (HH:MM:SS) (par d√©faut: $BACKGROUND_TC_IN)
  -o, --output FILE          Nom du fichier de sortie (par d√©faut: $FILE_OUT)

Avanc√© (facultatif) :
  --display-index N          √âcran utilis√© pour la capture avfoundation (d√©faut: $DISPLAY_INDEX)
  --crop WxH+X+Y             Zone de crop du widget (ex: 350x344+365+850)
  --size WxH                 Taille de fen√™tre Chrome (ex: 1080x1920)

Exemple :
  $0 --track-url "https://soundcloud.com/user/track" \\
     --duration 30 --audio-tc-in 00:01:23 \\
     --background-url "https://youtube.com/watch?v=xxxx" \\
     --background-tc-in 00:40:10 --output out.mp4
EOF
}

# ----------- Parsing arguments -----------
while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--track-url)        TRACK_URL="$2"; shift 2 ;;
    -d|--duration)         WIDGET_DURATION="$2"; shift 2 ;;
    -a|--audio-tc-in)      AUDIO_TC_IN="$2"; shift 2 ;;
    -b|--background-url)   BACKGROUND_URL="$2"; shift 2 ;;
    -s|--background-tc-in) BACKGROUND_TC_IN="$2"; shift 2 ;;
    -o|--output)           FILE_OUT="$2"; shift 2 ;;
    --display-index)       DISPLAY_INDEX="$2"; shift 2 ;;
    --crop)
      IFS='x+ ' read -r CROP_W CROP_H CROP_X CROP_Y <<<"$(echo "$2" | sed -E 's/x/ /; s/\+/ /; s/\+/ /')"
      shift 2
      ;;
    --size)
      IFS='x' read -r DISPLAY_WIDTH DISPLAY_HEIGHT <<<"$2"
      shift 2
      ;;
    -h|--help)             show_help; exit 0 ;;
    --) shift; break ;;
    -*)
      echo "‚ùå Option inconnue: $1" >&2
      show_help
      exit 1
      ;;
    *) break ;;
  esac
done

# ----------- V√©rifs & pr√©requis -----------
need() { command -v "$1" >/dev/null 2>&1 || { echo "‚ùå '$1' manquant. Installe-le (brew install $1)."; exit 1; }; }
need python3
need ffmpeg
need yt-dlp

# D√©tecter binaire Chrome/Chromium et le lancer avec PID tra√ßable
BROWSER_BIN=""
for p in \
  "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" \
  "/Applications/Chromium.app/Contents/MacOS/Chromium" \
  "$(command -v google-chrome || true)" \
  "$(command -v chromium || true)"; do
  [[ -x "$p" ]] && BROWSER_BIN="$p" && break
done
if [[ -z "$BROWSER_BIN" ]]; then
  echo "‚ùå Chrome/Chromium introuvable. Installe Google Chrome (recommand√©)."
  exit 1
fi

# Avertissement permissions macOS
echo "‚ö†Ô∏è  macOS demandera l'autorisation de 'Screen Recording' pour ffmpeg (Terminal/iTerm)."
echo "    Va dans: Pr√©f√©rences Syst√®me ‚Üí S√©curit√© et confidentialit√© ‚Üí Enregistrement de l'√©cran."

# ----------- Affichage param√®tres -----------
echo "üéµ Track URL        : $TRACK_URL"
echo "‚è±Ô∏è  Widget dur√©e    : $WIDGET_DURATION s"
echo "üéß Audio start      : $AUDIO_TC_IN"
echo "üì∫ Background URL   : $BACKGROUND_URL"
echo "‚è±Ô∏è  Background start: $BACKGROUND_TC_IN"
echo "üíæ Fichier sortie   : $FILE_OUT"
echo "üñ•Ô∏è  Capture √©cran   : avfoundation display index=$DISPLAY_INDEX"
echo "ü™ü Fen√™tre Chrome   : ${DISPLAY_WIDTH}x${DISPLAY_HEIGHT} @ (0,0)"
echo "‚úÇÔ∏è  Crop widget      : ${CROP_W}x${CROP_H}+${CROP_X}+${CROP_Y}"

AUDIO_DURATION="$WIDGET_DURATION"
BACKGROUND_DURATION="$WIDGET_DURATION"

# ----------- Utilitaires -----------

# Calcul BACKGROUND_TC_OUT en Python (portable)
py_tc_out() {
  local tc_in="$1" dur="$2"
  python3 - <<'PY'
import sys, datetime as dt
tc_in = sys.argv[1]
dur   = int(sys.argv[2])
h,m,s = map(int, tc_in.split(':'))
t0 = dt.datetime(1970,1,1, h, m, s)
t1 = t0 + dt.timedelta(seconds=dur)
print(t1.strftime("%H:%M:%S"))
PY
  # pass args
} > /tmp/.tc_out.txt 2>/dev/null <<EOF
$BACKGROUND_TC_IN
$BACKGROUND_DURATION
EOF
BACKGROUND_TC_OUT="$(cat /tmp/.tc_out.txt)"

# Check si serveur 8000 √©coute; sinon le d√©marrer
if ! lsof -iTCP:"$WEBSERVER_PORT" -sTCP:LISTEN >/dev/null 2>&1; then
  echo "üåê D√©marrage du serveur web local sur :$WEBSERVER_PORT‚Ä¶"
  ( python3 -m http.server "$WEBSERVER_PORT" >/dev/null 2>&1 & echo $! > /tmp/.pyhttpserver.pid )
  trap '[[ -f /tmp/.pyhttpserver.pid ]] && kill "$(cat /tmp/.pyhttpserver.pid)" 2>/dev/null || true' EXIT
else
  echo "‚úÖ Serveur web d√©j√† actif sur $WEBSERVER_PORT"
fi

# ----------- R√©cup ID SoundCloud ----------- #
echo "R√©cup√©ration de l'ID de la track sur SoundCloud‚Ä¶"
TRACK_ID="$(yt-dlp --print "%(id)s" "$TRACK_URL")"
echo "‚úÖ ID track: $TRACK_ID"

WEBSERVER_URL="http://127.0.0.1:${WEBSERVER_PORT}/${HTML_FILE}?id=${TRACK_ID}&t=${AUDIO_TC_IN}"

# ----------- Lancer Chrome normal (pas headless) ----------- #
# On fixe la taille & position pour avoir un cadrage reproductible pour le crop.
echo "D√©marrage du navigateur‚Ä¶"
"$BROWSER_BIN" \
  --new-window \
  --disable-features=TranslateUI \
  --disable-infobars \
  --autoplay-policy=no-user-gesture-required \
  --window-position=0,0 \
  --window-size="${DISPLAY_WIDTH},${DISPLAY_HEIGHT}" \
  "$WEBSERVER_URL" >/dev/null 2>&1 &
CHROME_PID=$!

# Donne 3s pour charger la page et stabiliser la fen√™tre
sleep 3

# Si la fen√™tre n'est pas correctement dimensionn√©e, on force via AppleScript (best effort)
# N√©cessite d'autoriser "Terminal" dans "Accessibilit√©" si macOS le demande.
osascript >/dev/null 2>&1 <<OSA || true
tell application "System Events"
  set frontApp to name of first process whose frontmost is true
end tell
if frontApp is "Google Chrome" or frontApp is "Chromium" then
  tell application frontApp
    activate
    set bounds of front window to {0, 0, $DISPLAY_WIDTH, $DISPLAY_HEIGHT}
  end tell
end if
OSA

# ----------- Enregistrement ffmpeg (Widget) -----------
echo "üé¨ Capture du widget (√©cran=$DISPLAY_INDEX) pendant ${WIDGET_DURATION}s‚Ä¶"
ffmpeg -y \
  -loglevel error \
  -f avfoundation -framerate 30 -video_size "${DISPLAY_WIDTH}x${DISPLAY_HEIGHT}" \
  -i "${DISPLAY_INDEX}:none" \
  -t "$WIDGET_DURATION" \
  -vf "crop=${CROP_W}:${CROP_H}:${CROP_X}:${CROP_Y}" \
  -c:v libx264 -preset slow -crf 16 -pix_fmt yuv420p \
  -c:a aac -b:a 192k "widget.mp4"
echo "‚úÖ Widget enregistr√©"

# ----------- Audio SoundCloud -----------
echo "T√©l√©chargement audio SoundCloud + d√©coupage‚Ä¶"
yt-dlp -x --audio-format mp3 "$TRACK_URL" -o "audio.mp3"
ffmpeg -y -ss "$AUDIO_TC_IN" -t "$AUDIO_DURATION" -i "audio.mp3" -acodec copy "audio_extract.mp3"
echo "‚úÖ Audio OK"

# ----------- Vid√©o YouTube (background) -----------
BACKGROUND_URL="${BACKGROUND_URL%%&*}"
echo "T√©l√©chargement extrait vid√©o background YouTube‚Ä¶"
yt-dlp -f "bv*[ext=mp4]/bv*" \
  --download-sections "*$BACKGROUND_TC_IN-$BACKGROUND_TC_OUT" \
  -o "background.mp4" \
  "$BACKGROUND_URL"
echo "‚úÖ Vid√©o background OK"

# ----------- Composition finale -----------
echo "üéõÔ∏è  Composition finale‚Ä¶"
ffmpeg -y -i background.mp4 -i widget.mp4 -i audio_extract.mp3 \
  -loglevel error \
  -filter_complex "\
[0:v]scale=${DISPLAY_WIDTH}:${DISPLAY_HEIGHT}:force_original_aspect_ratio=increase, \
 crop=${DISPLAY_WIDTH}:${DISPLAY_HEIGHT},setsar=1,boxblur=20:1[bg]; \
[1:v]scale=720:-2:force_original_aspect_ratio=decrease,setsar=1[fg]; \
[bg][fg]overlay=(W-w)/2:(H-h)/2:shortest=1[v]" \
  -map "[v]" -map 2:a -c:v libx264 -preset medium -crf 20 -c:a aac -shortest "$FILE_OUT"

echo "‚úÖ Termin√© : $FILE_OUT"

# ----------- Nettoyage & sortie propre ----------- #
# Fermer la fen√™tre Chrome ouverte par le script (best effort)
if ps -p "${CHROME_PID}" >/dev/null 2>&1; then
  kill "${CHROME_PID}" 2>/dev/null || true
fi

rm -f audio.mp3 audio_extract.mp3 background.mp4 widget.mp4 /tmp/.tc_out.txt
echo "üßπ Nettoyage OK ‚Äì pr√™t pour un nouvel export."

